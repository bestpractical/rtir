#!/usr/bin/env perl
### before: #!@PERL@
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2020 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
=head1 NAME

add_constituency - add or update constitiuensies

=head1 SYNOPSIS

    add_constituency --help
    add_constituency --name <constituency> [options]
    add_constituency --name EDUNET
    add_constituency --name EDUNET --correspond 'edunet@example.com' --verbose

    add_constituency --name <constituency> --rename <new value> --quiet

    add_constituency --name EDUNET --force

=head1 OPTIONS

=over 4

=item B<--name>

Constituency name. Mandatory argument.

=item --correspond

Set/update correspond address.

=item --comment

Set/update comment address.

=item --rename

Rename constituency, use this option to set new value when --name defines old.

=item --quiet

Limit output to only errors.

=item --verbose

Additional debugging output.

=item --force

Don't prompt about changes to be made, useful to combine with --quiet

=back

=head1 DESCRIPTION

This command line utitlity is a helper for activating advanced access control
on tickets using the current value of the constituency field.

Read more in F<lib/RT/IR/Constituencies.pod> using perldoc tool.

=cut

use warnings;
use strict;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt4/local/lib /opt/rt4/lib);

use RT;
RT::LoadConfig;

my %opt;

sub notify {
    return if $opt{'quiet'};
    print @_;
    return 1;
}

use Getopt::Long;
GetOptions( \%opt, "name=s", "rename=s", "correspond=s", "comment=s", "help",
    "quiet", "verbose", "force" );

if ( $opt{'help'} ) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage(
        -msg     => "RTIR Constituencies management tool\n",
        -verbose => 2,
        -exitval => 0,
    );
}

if ($opt{verbose}) {
    RT->Config->Set(LogToSTDERR => 'debug');
}
elsif ($opt{quiet}) {
    RT->Config->Set(LogToSTDERR => 'error');
}
else {
    RT->Config->Set(LogToSTDERR => 'info');
}

RT::Init;

my $manager = RT::IR::ConstituencyManager->new(Constituency => $opt{name});

my $constituency = $manager->Constituency;
unless ( defined $constituency && length $constituency ) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage(
        -msg     => "Name of constituency is a mandatory argument\n",
        -exitval => 1,
    );
}

if (exists $opt{'rename'}) {
    exit rename_constituency($opt{'rename'});
}
else {
    exit add_constituency();
}

sub add_constituency {
    $RT::Handle->BeginTransaction;

    my $exist = $manager->CustomFieldValueExists($constituency);

    notify "\nIf you continue then we'll...\n";
    if ($exist) {
        notify "* WARNING: skip adding constituency value, already exists.\n";
    } else {
        notify "* add new constituency value: '$constituency'.\n";
    }

    foreach my $name ($manager->QueueNames) {
        notify "* create queue '$name' if it doesn't exist\n";
    }
    notify <<END;
* create group 'DutyTeam $constituency' if it don't exist
* create group 'ReadOnly $constituency' if it don't exist
* grant basic set of rights to the groups on the queues

END

    unless ( $opt{'force'} ) {
        if ($exist) {
            exit 0 unless prompt_yN("Do you want to proceed with adding this constituency?");
        } else {
            exit 0
                unless prompt_yN(
                "Do you want to proceed creating the new constituency?");
        }
    }

    my ($ok) = $manager->AddConstituency(
        Correspond => $opt{correspond},
        Comment    => $opt{comment},
    );

    if ($ok) {
        $RT::Handle->Commit;
        notify "Done. Enjoy your new constituency.\n";
        return 0;
    }
    else {
        $RT::Handle->Rollback;
        notify "An error occurred; constituency not created.\n";
        return 1;
    }
}

sub rename_constituency {
    my $new = $manager->SanitizeValue(shift);
    my $old = $manager->Constituency;

    unless ( $manager->CustomFieldValueExists($old) ) {
        die "Couldn't rename. Constituency '$old' doesn't exist.";
    }
    if ( $manager->CustomFieldValueExists($new) ) {
        die "Couldn't rename. Constituency '$new' already exists.";
    }

    $RT::Handle->BeginTransaction;

    notify "\nIf you continue then we'll...\n";
    notify "* rename constituency value '$old' into '$new'.\n";

    my $queues = $manager->Queues;
    while (my $queue = $queues->Next) {
        my $oldname = $queue->Name;
        my $newname = $oldname;
        $newname =~ s/$old/$new/;

        notify "* rename queue '$oldname' to '$newname'.\n";
    }

    notify <<END;
* rename group 'DutyTeam $old' if it exists into 'DutyTeam $new'
* rename group 'ReadOnly $old' if it exists into 'ReadOnly $new'

END

    return 0 unless prompt_yN("Do you want to proceed with renaming this constituency?");

    my ($ok) = $manager->RenameConstituency($new);

    if ($ok) {
        $RT::Handle->Commit;
        notify "Renamed constituency '$old' to '$new'.\n";
        return 0;
    }
    else {
        $RT::Handle->Rollback;
        notify "An error occurred; constituency not renamed.\n";
        return 1;
    }
}

sub prompt_yN {
    my $text = shift;
    print "$text [y/N] ";
    return 0 unless <STDIN> =~ /^(?:y|yes)$/i;
    return 1;
}

