%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2014 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%INIT>

my $query_string = sub {
    my %args = @_;
    my $u    = URI->new();
    $u->query_form(map { $_ => $args{$_} } sort keys %args);
    return $u->query || '';
};

my $args = $DECODED_ARGS;

my @query_fields = qw(Query Format RowsPerPage Page OrderBy Order);

my $search_arguments = sub {
    my %res = ();
    my $caller_args = $m->caller_args(1);
    if ( $caller_args->{'SearchArgs'} ) {
        @res{ @query_fields } = @{ $caller_args->{'SearchArgs'} }{ @query_fields };
    } else {
        @res{ @query_fields } = @{ $args }{ @query_fields };
    }
    delete $res{$_} foreach grep !defined $res{$_}, keys %res;
    return %res;
};

my $root = Menu->child( rtir => title => loc('RTIR'), path => '/RTIR/' );

my $search = $root->child( search => title => loc('Search'), path => '/RTIR/Search/' );
$search->child( new => title => loc('New Search'), path => '/RTIR/Search/?NewQuery=1' );

{
my $current_search = $session{'CurrentSearchHash'} ? { map { $_ => $session{'CurrentSearchHash'}{$_} } @query_fields } : {};
my $has_query = 1 if ( $args->{'Query'} or $current_search->{'Query'} );

if ( $has_query ) {
    $search->child( build => title => loc('Edit Search'), path => '/RTIR/Search/' );
    $search->child( results => title => loc('Show Results'),
                    path => '/RTIR/Search/Results.html?' .
                    $query_string->( $args->{'Query'} ? $search_arguments->() : %$current_search ) );
}
}

foreach my $queue (@RT::IR::QUEUES) {
    my $escaped_queue = $m->interp->apply_escapes( $queue, 'u' );
    my $queue_without_spaces = $queue;
    $queue_without_spaces =~ s/\s*//;
    
    unless (RT->Config->Get('RTIR_Disable' . $queue_without_spaces . 'Queue')) {
        my $new_ticket_text = 'Create';
        $new_ticket_text = 'Launch' if $queue eq 'Investigations';
        
        $root->child(
            $queue_without_spaces => title => loc($queue),
            path => '/RTIR/Search/Results.html?Queue=' . $escaped_queue
        )->child(
            create => title => loc($new_ticket_text),
            path => '/RTIR/Create.html?Queue=' . $escaped_queue,
        );
    }
}

my $tools = $root->child( tools => title => loc('Tools'), path => '/RTIR/Tools/' );
$tools->child( lookup => title => loc('Lookup'), path => '/RTIR/Tools/Lookup.html' );
$tools->child( reporting => title => loc('Reporting'), path => '/RTIR/Reporting/' );
my $scripted_actions = $tools->child( scripted_actions => title => loc('Scripted Action') );
$scripted_actions->child( email => title => loc('By Email address'), path => '/RTIR/Tools/ScriptedAction.html' );
$scripted_actions->child( ip => title => loc('By IP address'), path => '/RTIR/Tools/ScriptedAction.html?loop=IP' );

my $request_path = $HTML::Mason::Commands::r->path_info;
$request_path =~ s!/{2,}!/!g;
return unless $request_path =~ m{^/RTIR/};

my $re_rtir_types = '(?:'. join( '|', map "\Q$_\E", RT::IR->Types ) .')';

if ( $request_path =~ m{^/RTIR/(?:$re_rtir_types/)?(Display|Edit|Update|Forward|Advanced)\.html$} ) {
    my $id = $args->{'id'};

    # we'll never get here unless ticket is there and it's rtir's type
    my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
    $ticket->Load($id);
    $id = $ticket->id;

    my $queue = $ticket->QueueObj;
    my $type = RT::IR::TicketType( Queue => $queue );

    my %can;
    my $can = sub {
        return $can{$_[0]} if exists $can{$_[0]};
        return $can{$_[0]} = $ticket->CurrentUserHasRight( $_[0] );
    };

    my $actions_tab = PageMenu()->child( actions => title => loc('Actions'), sort_order  => 95 );

    PageMenu()->child( display => title => loc('Display'), path => "/RTIR/Display.html?id=$id" );

    # RT4 TODO: something wrong, this doesn't work
    if ( $session{'tickets'} ) {
        # we have to update session data if we get new ItemMap
        my $updatesession = 1 unless ( $session{"tickets"}->{'item_map'} );
        my $item_map = $session{"tickets"}->ItemMap;
        $session{"tickets"}->PrepForSerialization
            if $updatesession;

        # Don't display prev links if we're on the first ticket
        my $top = PageMenu();
        if ( my $t = $item_map->{$id}->{'prev'} ) {
            $top = $top->child(
                previouse => path => "/RTIR/Display.html?id=$id",
                title => '< ' . loc('Prev')
            );
        }
        if ( my $t = $item_map->{'first'} ) {
            $top->child(
                first => path  => "/RTIR/Display.html?id=$t",
                title => '<< ' . loc('First')
            ) if $t != $id;
        }

        $top = PageMenu();
        if ( my $t = $item_map->{$id}->{'next'} ) {
            $top = $top->child(
                next => path  => "/RTIR/Display.html?id=$t",
                title => loc('Next') . ' >'
            );
        }
        if ( my $t = $item_map->{'last'} ) {
            $top->child(
                last => path  => "/RTIR/Display.html?id=$t",
                title => loc('Last') . ' >>'
            ) if $t != $id;
        }
    }

    if ( $can->('ModifyTicket') ) {
        PageMenu()->child( edit => title => loc('Edit'), path => "/RTIR/Edit.html?id=$id" );
        PageMenu()->child( split => title => loc('Split'), path => "/RTIR/Split.html?Split=$id" );
        # XXX: we're missing query string here
        PageMenu()->child( merge => title => loc('Merge'), path => "/RTIR/Merge/?id=$id" );
        PageMenu()->child( advanced => title => loc('Advanced'), path => "/RTIR/Advanced.html?id=$id" );
    }

    if ( $can->('OwnTicket') ) {
        if ( $ticket->Owner == $RT::Nobody->id ) {
            $actions_tab->child(
                take => title => loc('Take'),
                path  => "/RTIR/Display.html?Action=Take&id=$id",
            ) if $can->('ModifyTicket') || $can->('TakeTicket');
        } elsif ( $ticket->Owner != $session{CurrentUser}->id ) {
            $actions_tab->child(
                steal => title => loc('Steal'),
                path  => "/RTIR/Display.html?Action=Steal&id=$id",
            ) if $can->('ModifyTicket') || $can->('StealTicket');
        }
    }

    if ( $can->('ModifyTicket') || $can->('ReplyToTicket') ) {
        if ( $type eq 'Incident' ) {
            $actions_tab->child(
                reply_reporters => title => loc('Reply to Reporters'),
                path  => "/RTIR/Incident/Reply/?id=$id&SelectedReportsAll=1",
            );
            $actions_tab->child(
                reply_all => title => loc('Reply to All'),
                path  => "/RTIR/Incident/Reply/?id=$id&All=1&SelectedReportsAll=1&SelectedInvestigationsAll=1&SelectedBlocksAll=1",
            );
        } else {
            $actions_tab->child(
                reply => title => loc('Reply'),
                path  => "/RTIR/Update.html?id=$id&Action=Respond",
            );
        }
    }

    if ( $can->('ForwardMessage') ) {
        $actions_tab->child( forward => title => loc('Forward'), path => "/RTIR/Forward.html?id=" . $id );
    }

    my $i = 0;
    my $status = $ticket->Status;
    my $lifecycle = $queue->LifecycleObj;
    foreach my $info ( $lifecycle->Actions( $status ) ) {
        my $next = $info->{'to'};
        next unless $lifecycle->IsTransition( $status => $next );

        my %args = (%$info, id => $id);
        delete @args{qw(to from label update)};

        # if user will be owner then he will get more rights
        # TODO: check actually if he will get required rights
        if ( !$args{'TakeOrStealFirst'} || $session{'CurrentUser'}->id == $ticket->Owner ) {
            my $check = $lifecycle->CheckRight( $status => $next );
            next unless $can->( $check );
        }

        my $path = '/RTIR/';
        $path .= 'Incident/' if $type eq 'Incident';
        if ( my $update = $info->{'update'} ) {
            $path .= $type eq 'Incident'? 'Reply/' : 'Update.html';
            $path .= "?". $m->comp(
                '/Elements/QueryString',
                %args,
                Action => $update,
                Status => $next,
            );
        } else {
            $path .= "Display.html?". $m->comp(
                '/Elements/QueryString',
                %args,
                Status => $next,
            );
        }
        $actions_tab->child(
            lc($info->{'label'} || $next),
            title => loc( $info->{'label'} || ucfirst($next) ),
            path  => $path,
        );
    }

    if ( $can->('ModifyTicket') || $can->('CommentOnTicket') ) {
        $actions_tab->child(
            comment => title => loc('Comment'),
            path  => "/RTIR/Update.html?Action=Comment&id=$id",
        );
    }

    # TODO needs a "Can extract article into a class applied to this queue" check
    $actions_tab->child( 'extract-article' =>
            title => loc('Extract Article'),
            path  => "/Articles/Article/ExtractIntoClass.html?Ticket=$id",
    ) if $session{CurrentUser}->HasRight( Right => 'ShowArticlesMenu', Object => RT->System );


    PageMenu()->child(
        bookmark => raw_html => $m->scomp( '/Ticket/Elements/Bookmark', id => $id ),
        sort_order   => 99
    );
} elsif ( $request_path =~ m{^/RTIR/Link/(ToIncident|FromIncident)/} ) {
    my $direction = $1;
    my $queue = $args->{'Queue'};
    my $type = RT::IR::TicketType( Queue => $queue || 'Incidents' );

    my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
    $ticket->Load( $args->{'id'} );
    my $id = $ticket->id;

    my %args = (
        $search_arguments->(),
        id => $id,
        Queue => $queue,
    );

    PageMenu()->child(
        link => title => loc('Show Results'),
        path => "/RTIR/Link/$direction/?". $query_string->( %args ),
    );
    PageMenu()->child(
        edit_search => title => loc('Edit Search'),
        path => "/RTIR/Link/$direction/Refine.html?". $query_string->( %args ),
    );
    PageMenu()->child(
        new => title => loc("New $type"),
        path => !$queue
            ? "/RTIR/Create.html?Child=$id&Queue=Incidents"
            : "/RTIR/Create.html?". $query_string->( Incident => $id, Queue => $queue )
        ,
    );
    PageMenu()->child(
        back => title => loc('Back to ticket #[_1]', $id),
        path => "/RTIR/Display.html?id=$id",
    );
} elsif ( $request_path =~ m{^/RTIR/Incident/Children/} ) {
    my $queue = $args->{'Queue'} || 'Incident Reports';
    my $type = RT::IR::TicketType( Queue => $queue );

    my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
    $ticket->Load( $args->{'id'} );
    my $id = $ticket->id;

    my %args = (
        id => $id,
        Queue => $queue,
    );

    PageMenu()->child(
        new => title => loc("New $type"),
        path => "/RTIR/Create.html?". $query_string->( Incident => $id, Queue => $queue ),
    );
    PageMenu()->child(
        back => title => loc('Back to ticket #[_1]', $id),
        path => "/RTIR/Display.html?id=$id",
    );
} elsif ( $request_path =~ m{^/RTIR/Merge/} ) {
    my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
    $ticket->Load( $args->{'id'} );
    my $id = $ticket->id;

    my %args = (
        $search_arguments->(),
        id => $id,
    );

    PageMenu()->child(
        link => title => loc('Merge'),
        path => "/RTIR/Merge/?". $query_string->( %args ),
    );
    PageMenu()->child(
        edit_search => title => loc('Edit Search'),
        path => "/RTIR/Merge/Refine.html?". $query_string->( %args, Queue => $ticket->Queue ),
    );
    PageMenu()->child(
        back => title => loc('Back to ticket #[_1]', $id),
        path => "/RTIR/Display.html?id=$id",
    );
} elsif ( $request_path =~ m{^/RTIR/Incident/Reply/} ) {
    my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
    $ticket->Load( $args->{'id'} );
    my $id = $ticket->id;

    my %args = (
        $search_arguments->(),
        id => $id,
        All => $args->{'All'},
        Status => $args->{'Status'},
        Action => $args->{'Action'},
        map { $_ => $DECODED_ARGS->{$_} } grep { /Selected\w+All/ } keys %$DECODED_ARGS,
    );

    PageMenu()->child(
        link => title => loc('Reply'),
        path => "/RTIR/Incident/Reply/?". $query_string->( %args ),
    );
    PageMenu()->child(
        edit_search => title => loc('Edit Search'),
        path => "/RTIR/Incident/Reply/Refine.html?". $query_string->( %args ),
    );
    PageMenu()->child(
        back => title => loc('Back to ticket #[_1]', $id),
        path => "/RTIR/Display.html?id=$id",
    );
} elsif ( $request_path =~ m{^/RTIR/(Search/|Incident/BulkAbandon\.html$|Report/BulkReject\.html$)} ) {
    my %args = $search_arguments->();

    my $queue = $args->{'Queue'} || '';
    unless ( $queue ) {
        if ( $request_path =~ /Incident/ ) {
            $queue = 'Incidents';
        }
        elsif ( $request_path =~ /Report/ ) {
            $queue = 'Incident Reports';
        }
    }
    unless ( $queue ) {
        my (undef, @queues) = RT::IR->OurQuery( $args{'Query'} );
        $queue = $queues[0] if @queues == 1;
    }
    my $type = RT::IR::TicketType( Queue => $queue ) || '';

    $args{'Queue'} = $queue if $queue;

    if ( $args{'Query'} ) {
        PageMenu()->child(
            link => title => loc('Show Results'),
            path => "/RTIR/Search/Results.html?". $query_string->( %args ),
        );
    }

    # Refine.html doesn't let you change the Queue, so don't link there from the
    # full RTIR Search UI, only from the Bulk screens.
    my $bulk_path = 1 if $request_path =~ m{^/RTIR/(Incident/BulkAbandon\.html$|Report/BulkReject\.html$)};

    PageMenu()->child(
        edit_search => title => loc('Edit Search'),
        path => "/RTIR/Search/" .
                    ($bulk_path ? "Refine.html?" : "?") .
                    $query_string->( %args ),
    );
    if ( $args{'Query'} && !$bulk_path ) {
        PageMenu()->child(
            new_search => title => loc('New Search'),
            path => "/RTIR/Search/?NewQuery=1"
        );
    }

    if ( $type eq 'Incident' ) {
        PageMenu()->child(
            report => title => loc('Report'),
            path => "/RTIR/Reporting/",
        );

        PageMenu()->child(
            abandon => title => loc('Bulk Abandon'),
            path => "/RTIR/Incident/BulkAbandon.html?". $query_string->( %args ),
        );
    }
    elsif ( $type eq 'Report' ) {
        PageMenu()->child(
            reject => title => loc('Bulk Reject'),
            path => "/RTIR/Report/BulkReject.html?". $query_string->( %args ),
        );
    }

    if ( $args{'Query'} ) {
        PageMenu()->child(
            chart => title => loc('Chart'),
            path => "/RTIR/Search/Reporting.html?". $query_string->( %args ),
        );

        my $more = PageMenu->child( more => title => loc('Feeds') );
        $more->child(
                spreadsheet => title => loc('Spreadsheet'),
                path => "/Search/Results.tsv?". $query_string->( %args ),
        );

        # other paths need query defined
        $args{'Query'} = RT::IR->Query( Queue => $args{'Queue'} )
            if !$args{'Query'} && $args{'Queue'};

        my $RSSPath = join '/', map $m->interp->apply_escapes( $_, 'u' ),
            $session{'CurrentUser'}->UserObj->Name,
            $session{'CurrentUser'}->UserObj->GenerateAuthString(
                join '', map $args{$_}||'', qw(Query Order OrderBy)
            )
        ;
        $more->child(
            rss => title => loc('RSS'),
            path => "/NoAuth/rss/$RSSPath/?". $query_string->(
                Query => $args{Query}, Order => $args{Order}, OrderBy => $args{OrderBy}
            ),
        );

        my $ical_path = join '/', map $m->interp->apply_escapes($_, 'u'),
            $session{'CurrentUser'}->UserObj->Name,
            $session{'CurrentUser'}->UserObj->GenerateAuthString( $args{Query} ),
            $args{Query}
        ;
        $more->child( ical => title => loc('iCal') => path => '/NoAuth/iCal/'.$ical_path);

        if ( $session{'CurrentUser'}->HasRight( Right => 'SuperUser', Object => RT->System ) ) {
            my $shred_args = $query_string->(
                Search          => 1,
                Plugin          => 'Tickets',
                'Tickets:query' => $args{'Query'},
                'Tickets:limit' => $args{'RowsPerPage'},
            );
            $more->child(
                shredder => title => loc('Shredder'),
                path => '/Admin/Tools/Shredder/?' . $shred_args
            );
        }
    }
} elsif ( $request_path =~ m{^/RTIR/(?:$re_rtir_types/)?Split\.html$} ) {
    my $id = $args->{'Split'};

    PageMenu()->child(
        back => title => loc('Back to ticket #[_1]', $id),
        path => "/RTIR/Display.html?id=$id",
    );
}

if ( $session{'CurrentUser'}->HasRight(Right => 'ModifySelf', Object => $RT::System) ) {
    if ( $request_path =~ m{^/RTIR/(?:index\.html|)$} ) {
        PageMenu()->child( edit => title => loc('Edit'), path => '/RTIR/Prefs/Home.html' )
    }
    Menu->child('preferences')->child('settings')->child(
        rtir_home_page => title => loc('RTIR at a glance'),
        path => '/RTIR/Prefs/Home.html',
    );
}

PageWidgets()->child('simple_search')->raw_html( $m->scomp(
    '/Elements/SimpleSearch',
    SendTo => '/RTIR/index.html',
    Placeholder => 'Search Incidents'
) );

</%INIT>
