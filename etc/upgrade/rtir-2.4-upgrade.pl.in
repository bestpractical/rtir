#!/usr/bin/env perl
### before: #!@PERL@
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2020 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
use warnings;
use strict;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt5/local/lib /opt/rt5/lib);

use RT::Interface::CLI qw(CleanEnv GetCurrentUser GetMessageContent loc); 
use RT::Tickets; 
use RT::Template;
use RT::Queue;

#Clean out all the nasties from the environment
CleanEnv();

# Load the config file
RT::LoadConfig();
RT->Config->Set( LogToScreen => 'warning' );

#Connect to the database and get RT::SystemUser and RT::Nobody loaded
RT::Init();

my $current_user = GetCurrentUser();

# Get the open incidents with no due dates
my $incidents = RT::Tickets->new( $current_user );
my $incidents_query = 
    "Queue = 'Incidents' AND Due <= '1970-01-02'"
    ." AND ( ". join( ' OR ', map { "Status = '$_'" } RT::Queue->ActiveStatusArray() ) ." )";
$incidents->FromSQL( $incidents_query );

print "\n\nGoing to update due dates of Incidents where it's not set\n";

print "Query for incidents: $incidents_query\n\n";

my $base_query = "( Queue = 'Incident Reports' OR Queue = 'Investigations' OR Queue = 'Blocks' )"
    ." AND ( ". join( ' OR ', map { "Status = '$_'" } RT::Queue->ActiveStatusArray() ) ." )"
    ." AND Due > '1970-01-02'";

print "Base query for children: $base_query\n\n";

# Get the children for each Incident
my $children = RT::Tickets->new( $current_user );

require File::Temp;
my $tmp = File::Temp->new; # croak on error

FetchNext( $incidents, 1 );
while ( my $inc = FetchNext( $incidents ) ) {
    $children->FromSQL( "( $base_query ) AND MemberOf = " . $inc->Id );
    $children->OrderBy( FIELD => 'Due', ORDER => 'ASC' );
    $children->RowsPerPage(1);
    my $child = $children->First or next;

    print $tmp $inc->id ." ". $child->DueObj->ISO ."\n";
}

seek $tmp, 0, 0;
while ( my $str = <$tmp> ) {
    chomp $str;
    my ($id, $date) = split /\s/, $str, 2;
    my $inc = RT::Ticket->new( $RT::SystemUser );
    $inc->Load( $id );
    unless ( $inc->id ) {
        print STDERR "Couldn't load incident #$id\n";
        next;
    }
    my ($status, $msg) = $inc->SetDue( $date );
    unless ( $status ) {
        print STDERR "Couldn't set due date of the incident #$id: $msg\n";
        next;
    }
    print "Updated inc #$id, due is $date\n";
}
print "done.\n";

use constant PAGE_SIZE => 100;
sub FetchNext {
    my ($objs, $init) = @_;
    if ( $init ) {
        $objs->RowsPerPage( PAGE_SIZE );
        $objs->FirstPage;
        return;
    }

    my $obj = $objs->Next;
    return $obj if $obj;
    $objs->NextPage;
    return $objs->Next;
}

