# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2021 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}

package RT::IR::Test;
use strict;
use warnings;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt5/local/lib /opt/rt5/lib);

use base 'RT::Test';

use RT::IR::Test::Web;

our @EXPORT = qw(
    default_agent
    rtir_user
);

sub import {
    my $class = shift;
    my %args  = @_;

    $args{'requires'} ||= [];
    if ( $args{'testing'} ) {
        unshift @{ $args{'requires'} }, 'RT::IR';
    } else {
        $args{'testing'} = 'RT::IR';
    }

    $class->SUPER::import( %args );

    my $level = 1;
    while ( my ($package) = caller($level-1) ) {
        last unless $package =~ /Test/;
        $level++;
    }
    RT::IR::Test->export_to_level($level);

    RT->Config->Set( 'rtirname' => 'regression_tests' );
    return;
}

our $RTIR_TEST_USER = "rtir_test_user";
our $RTIR_TEST_PASS = "rtir_test_pass";

sub default_agent {
    my $agent = RT::IR::Test::Web->new;
    require HTTP::Cookies;
    $agent->cookie_jar( HTTP::Cookies->new );
    rtir_user();
    $agent->login($RTIR_TEST_USER, $RTIR_TEST_PASS);
    $agent->get_ok("/RTIR/index.html", "Loaded home page");
    return $agent;
}

sub rtir_user {
    return RT::Test->load_or_create_user(
        Name         => $RTIR_TEST_USER,
        Password     => $RTIR_TEST_PASS,
        EmailAddress => "$RTIR_TEST_USER\@example.com",
        RealName     => "$RTIR_TEST_USER Smith",
        MemberOf     => 'DutyTeam',
    );
}

sub import_snapshot {
    my $self = shift;
    my $file = shift;

    my $db_type = RT->Config->Get('DatabaseType');

    if ( $db_type eq 'mysql' ) {
        my @args = ('-u', $ENV{'RT_DBA_USER'});
        if ( length $ENV{'RT_DBA_PASSWORD'} ) {
            push @args, '--password='. $ENV{'RT_DBA_PASSWORD'}
        }
        push @args, RT->Config->Get('DatabaseName');
        my $cmd = $ENV{'RT_TEST_MYSQL_CLIENT'} || 'mysql';

        # drop the old database (which has a modern schema bringing new
        # tables and such), then create a fresh one *with no schema*,
        # which will be populated by the snapshot in the next step
        RT::Test::__create_database(DropDatabase => 1);

        Test::More::diag("About to run `". join(' ', $cmd, @args) ."`");

        open my $fh, "|-", $cmd, @args
            or die "couldn't run mysql: $!";
        print $fh $self->file_content( ['t','data', 'snapshot', $db_type, $file] );
        close $fh;

        RT::Test::__reconnect_rt();
    } else {
        die "Importing snapshot is not implemented for $db_type";
    }
}

sub apply_upgrade {
    my $self = shift;
    my $base_dir = shift;
    my @versions = @_;

    my $db_type = RT->Config->Get('DatabaseType');

    my $upgrade = sub {
        foreach my $n ( 0..$#versions ) {
            my $v = $versions[$n];

            my $datadir = "$base_dir/$v";
            if ( -e "$datadir/schema.$db_type" ) {
                my ( $ret, $msg ) = RT::Handle->InsertSchema( get_admin_dbh(), $datadir );
                return ( $ret, $msg ) unless $ret;
            }
            if ( -e "$datadir/acl.$db_type" ) {
                my ( $ret, $msg ) = RT::Handle->InsertACL( get_admin_dbh(), $datadir );
                return ( $ret, $msg ) unless $ret;
            }
            if ( -e "$datadir/content" ) {
                RT::Test::__reconnect_rt();
                my ( $ret, $msg ) = $RT::Handle->InsertData( "$datadir/content" );
                return ( $ret, $msg ) unless $ret;
            }
        }

        RT::Test::__reconnect_rt();
    };

    foreach my $n ( 0..$#versions ) {
        my $v = $versions[$n];

        my $datadir = "$base_dir/$v";
        my $file = "$datadir/backcompat";
        if ( -e $file ) {
            my $lines = do {local $/; local @ARGV = ($file); <>};
            my $sub = eval "sub {\n# line 1 $file\n$lines\n}";
            unless ($sub) {
                warn "Failed to load backcompat $file: $@";
                next;
            }
            my $current = $upgrade;
            $upgrade = sub { $sub->($current) };
        }
    }

    $upgrade->();

    return 1;
}

sub get_admin_dbh {
    return _get_dbh( RT::Handle->DSN, $ENV{'RT_DBA_USER'}, $ENV{'RT_DBA_PASSWORD'} );
}

sub _get_dbh {
    my ($dsn, $user, $pass) = @_;
    my $dbh = DBI->connect(
        $dsn, $user, $pass,
        { RaiseError => 0, PrintError => 0 },
    );
    unless ( $dbh ) {
        my $msg = "Failed to connect to $dsn as user '$user': ". $DBI::errstr;
        print STDERR $msg; exit -1;
    }
    return $dbh;
}

1;
