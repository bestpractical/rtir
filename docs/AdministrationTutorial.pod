=head1 RTIR Administrative Tutorial

=head2 General Configuration

RT and RTIR store many configuration items in configuration files
on the file system in the etc directory in your RT directory.
F<RT_Config.pm> and F<RTIR_Config.pm> provide documentation on all available
configuration options and also set system defaults. You can view these
files to see what configuration options are available, but don't edit
these files to change configuration values. The F<RT_SiteConfig.pm> file
is specifically provided to store your core site-specific configurations
and you may create F<RTIR_SiteConfig.pm> for customizations to configuration
declared in F<RTIR_Config.pm>.  F<RTIR_SiteConfig.pm> is normally
created in /opt/rt6/etc/.

To change a configuration value, copy the Set code from F<RT_Config.pm>
or F<RTIR_Config.pm> and add it to the relevant Site Config. Then set
your custom configuration values there.

=head2 RTIR Queues and Rights

=head3 DutyTeam Group

During installation, RTIR creates a group called DutyTeam and assigns a set
of rights to members of this group for working with RTIR queues. Add users to
this group to allow them to see the RTIR queues, create tickets,
take (Own) tickets, and see internal comments on tickets. You can check the
group rights on each RTIR queue to see the full list of rights granted to team
members.

=head3 Owner Rights

By default, RTIR limits the ability to modify tickets to the ticket Owner,
preventing confusion from multiple people working on the same Incident Report,
Incident, etc. DutyTeam members have the right to "Steal" tickets, which means
they can change Owner on a ticket from a different user to their user. This
allows team members to start working on a team member's ticket if needed.

Some operations can automatically change ownership to allow an update to complete
in one step. For example, on Incident Reports, the Reject and Quick Reject
actions have an option to "Take or Steal" the ticket first if needed, then
reject the ticket. You can see details of this configuration in the "actions"
section of the L<Incident Reports|https://docs.bestpractical.com/rt/latest/customizing/lifecycles.html>
lifecycle. The custom C<< TakeOrStealFirst => 1 >> option on the action enables
the feature.

Other operations, like resolving an Incident, have similar behavior, changing
Owner and resolving child tickets if possible.

=head2 Countermeasures Feature

You may disable the Countermeasures feature by putting the following into your
F<RTIR_SiteConfig.pm> config:

    Set($RTIR_DisableCountermeasures, 1);

You will probably also want to disable any Countermeasures queues using the RT
Administrative interface.  Tools -> Configuration -> Queues -> (select one),
uncheck Enabled and click Save Changes.

=head2 Status

The various states an incident, incident report, investigation, or
countermeasure can be in, such as 'open', 'stalled', 'abandoned', etc.

This field contains custom statuses for tickets, and values are different in
different queues. The status values are set via the C<%Lifecycles> option in
the RTIR configuration file. You can read more about Lifecycles in the
F<RT_Config.pm> file.

Status is a critical field for functionality.

For more information, read the description in F<RTIR_Config.pm> and description
of L</Scrips> below.

=head2 Custom Queues

While RTIR ships with four queues by default (Incident Reports, Incidents,
Investigations, and Countermeasures) you can create your own versions of these
queues.  This functionality (new in RTIR 4.0) is what powers the
L<Constituencies> feature, but its use is not limited to Constituencies. For
example you can have multiple queues for Incident Reports, one for each of your
monitoring tools, each with its own set of custom fields, watchers, automation
with scrips, templates, watchers, etc.

To create a new RTIR queue, visit RT's Admin -> Queue -> Create menu. Create
the queue as normal, but be sure to select an RTIR lifecycle (incident_reports,
incidents, investigations, or countermeasures). By doing so you include the
queue into the RTIR system. After creating the queue, it will be available
throughout RTIR alongside the four builtin incident response queues. Assign
custom fields, watchers, etc. as desired.

=head2 Custom Fields

When RTIR is installed, several custom fields are created and applied
to queues in RTIR. Some of these custom fields are important for
RTIR functionality and must not be renamed, disabled or un-applied,
but other fields can be.

=over 4

=item RTIR Constituency

The constituency of a queue.

Heavy automation is tied to this field. This is described in the
L<Constituencies> doc. Don't rename this field if you want to use this
functionality.

=item Description

Short description of an Incident.

=item Resolution

How an Incident was or wasn't resolved.

=item Function

Who is handling the Incident.

=item Classification

The type of Incident, such as system compromise or denial of service.

=item How Reported

How the IR got into RTIR.

=item ReporterType

Context for the incident reporter, such as the police, other ISP,
or external individual.

=item IP

IP addresses related to the incident, IR, investigation, or countermeasure.

Don't rename this custom field or it will lose all associated features.
It's possible to change this CF from multiple values to single value.

See L<Tutorial/IP> for more information.

See also L</SetIPFromContent> below.

=item Netmask

Network mask for a network block.

=item Port

Port for a network block.

=item Where Blocked

Where the network block is placed.

=item Customer

Customer for an IR or Investigation.

=back

=head2 Documenting Process for Incidents

Starting in version 5.0.4, RT supports a feature called Process Articles
that allows you to document the process for working on a ticket, and
display it right on the page. The process is managed in an article,
and which article to show is determined by a field on the ticket.

Starting in RTIR 5.0.4 this feature is available for Incidents. The
default Classification field contains values to indicate the type of
the incident. You can set up an article for each of the Classification
values to document how that type of incident should be handled. Once
configured, this documentation will be shown right on the incident page.

The configuration options L<ProcessArticleFields|https://docs.bestpractical.com/rt/latest/RT_Config.html#ProcessArticleFields>
and L<ProcessArticleMapping|https://docs.bestpractical.com/rt/latest/RT_Config.html#ProcessArticleMapping>
set the article class to use and also determine the mapping between
the Classification values and corresponding articles. If you have
added or removed Classification values, you can update this configuration
with your new settings.

Articles are created in a class called Incidents Processes by default,
and members of the DutyTeam group can see and modify these articles. You can
change the rights on the class if you want to restrict who can
update the documentation.

Edit the articles to add your actual process docuemtnation. Note that if
you change the article Name field, you need to update the C<%ProcessArticleMapping>
setting mentioned above because it uses the article name.

This feature is optional and can be disabled by clearing the
configuration options linked above.

=head2 Managing "RT at a glance" and "RTIR at a glance" pages

In the config you can set the C<@RTIR_HomepageComponents> option to control
allowed portlets people can add to thier workspace. RT has its own
option C<$HomepageComponents> so you can list different sets for RT and
RTIR. See L<Tutorial> for more information.

=head2 Notifications

Almost all email notifications in RT/RTIR are controlled via scrips.

There are three default base actions you can use to notify users:

=over 4

=item Notify

Sends a notification to users. The reply-to field is set
based on the correspond address. The NotifyActor option also
influences the set of recipients.

=item Notify As Comment

Similar to 'Notify', but the reply-to field is set based on
the comment address.

=item Autoreply

A variation of the 'Notify' action which sends email even if the
NotifyActor option is disabled.

=back

The above actions have multiple variants with different list of recipients,
for example 'Notify Owner' or 'Notify Requestors'. The list of recipients
may contain the following values: 'Requestors', 'Owner', 'Ccs', 'AdminCcs'
and 'Other Recipients'. 'Other Recipients' is the only special case,
these are users who are listed as one-time recipients on the ticket's
reply/comment pages. All other entries are watchers of a ticket.
The list can be a combination of values like 'Owner, Ccs, AdminCcs'.

Here are several examples:

    On Correspond Notify Requestors and Ccs with template Correspondence
    On Create Autoreply To Requestors with template Autoreply
    On Owner Change Notify Owner with template Transaction

Text of notifications is controlled using templates where a queue's template
can override the global one. For example you can create a template 'Correspondence'
in a queue and all notifications (global or queue specific) will use
that template instead of the global template.

=head2 Scrips

Scrips run for every transaction on a ticket in RT and RTIR,
sometimes changing values based on the transaction being
performed. Transactions are any change to a ticket, whether
updating a status or replying to a requestor.

=over 4

=item SetHowReported

Applies to Incident Reports.
On ticket creation, sets the HowReported custom field to a default
value of Email if it isn't otherwise specified.

=item On Correspond Change Status of the Countermeasure

On replies, changes the status of countermeasures according to a few rules
that are described in L<RT::Action::RTIR_SetCountermeasureStatus/DESCRIPTION>.

RT's default L<RT::Action::AutoOpen> is disabled for countermeasures to
avoid unwanted changes of status from 'pending activation'
to 'active'.

See also the C<$RTIR_CountermeasureApproveActionRegexp> option
in the config.

=item On Linking To Incident Activate Report

=item On Correspond (not every) Activate Report

IRs are activated (status changed to first possible active status,
by default 'open') only when they are linked to an incident.
These two scrips take care of that.

RT's default L<RT::Action::AutoOpen> is disabled for IRs to avoid
unwanted changes of status when an IR is not linked. When an IR is
linked to an Incident, L<RT::Condition::RTIR_RequireReportActivation>
checks everything that RT's AutoOpen checks and the scrip behaves in
the same way.

=item Set Due Date On Incident

Keeps the Due date of incidents in sync with the most due child.

See L</"Service Level Agreements (SLAs)"> below for details on automating
Due dates, and L<RT::Action::RTIR_SetDueIncident> for details
about action of the scrip.

It is now possible to edit the Due date of Incidents manually, however
editing a child's Due Date will disable this (and Incident Due dates are
not copied down to Children).

=item ResolveAllChildren

Applies to Incidents.

If an incident is changed to an inactive status, looks for linked tickets in
Incident Reports, Investigations or Countermeasures queues and resolves them.
If any of these linked tickets are linked to other ongoing incidents, a comment
is added and they remain unresolved.

=item FixOwnership

For Incidents: When the Owner of an incident is changed, the Owner of linked
children tickets are changed to the same owner.

For Incident Reports, Countermeasures and Investigations: When the Owner of a
ticket in such queues is changed, that change is also applied to the linked
Incident.

=item ReopenIncident

Applies to Incident Reports, Countermeasures and Investigations.

If the status of a ticket in such queues is changed from rejected or
resolved, the linked parent Incident ticket status is set to open.

=item SetDefaultIncidentResolution

Applies to Incidents.

When an incident's status is changed, if it is changed from an
inactive status to an active status, the Resolution custom field
is cleared. If it is changed from an active status to an inactive status
and the Resolution custom field isn't set manually, it is set
to the value set in %RTIR_CustomFieldsDefaults in your
F<RTIR_Config.pm>.

=item NotifyOnClose

Applies to Countermeasures.

When a countermeasure ticket is moved from an active status to an inactive
status (closed), the requestors on the countermeasure are notified using the
L<Templates/CountermeasureRemoved in Countermeasure queue> template.

=item SetIPFromContent

Applies to Incident Reports, Countermeasures, Incidents and Investigations.

Updates the ticket custom field IP to have a list of all IPs and IP ranges
found in the body of the ticket during Create and Correspond.

If configuration of the CF allows only one value then only first IP
from the content is used.

It's OK to disable this scrip.

=back

=head2 Templates

=over 4

=item Autoreply in Countermeasures queue

This template is sent when a countermeasure is created.

=item CountermeasureRemoved in Countermeasure queue

This template is sent when a countermeasure is removed.

=item Autoreply in Investigations queue

This template is sent when a new investigation is launched.

=back

=head2 Locking

See the documentation for L<RT::Extension::TicketLocking>

=head2 Aging

See the documentation for L<RT::Extension::TicketAging>

=head2 Maintaining DB size, deleting entries, restoring deleted data

During normal operation RT/RTIR never deletes data from the database.
RT has a tool called Shredder that allows you to remove data such as users or
tickets from the RT/RTIR system. You can find documentation for this
tool in L<RT::Shredder> by running `perldoc lib/RT/Shredder.pm`
or on the Best Practical website at
L<https://docs.bestpractical.com/rt/latest/RT/Shredder.html>.
RT::Shredder's documentation includes information on restoring deleted data
from backups. RT::Shredder provides SQL commands to reverse any delete
operations, so any data that it deletes may be restored.

=head2 GnuPG and S/MIME support

GnuPG and S/MIME integration is a core feature of RT.  Configuration
can be done in your F<RT_SiteConfig.pm>.
See also the documentation in L<RT::Crypt>.

=head3 Reverification

RTIR supports reverification of incoming email. If a user sends signed mail
but RTIR doesn't have his public key (or if some other error occurs), then his
message will be processed, but there will be "This message is
unverified" warnings in the UI. Afterwards, RTIR will automatically attempt to
reverify that message whenever someone views it.

=head3 Key selection

Sometimes a user will have multiple public keys in RTIR's GPG database. When
that happens, RTIR has the user writing the message decide which key to use
when sending that user encrypted mail. They are listed as fingerprints along
with their trust levels. If only one key is valid, then RTIR will
automatically choose it instead of asking the user.

If a user has no trusted keys, then the web interface will warn and refuse to
send him an encrypted message. This is ultimately due to limitations in GnuPG:
we cannot encrypt a message with an untrusted key.  Managing the trust levels
of keys must be done outside of RT as there is not currently key management
support available.

=head3 Missing passphrase

If RTIR is asked to sign an outgoing message and the passphrase is unavailable,
it will detect this and avoid sending any email. The user will be asked to
notify a system administrator.

A missing passphrase occurs when GPG Agent is unresponsive or the passphrase
is wrong in F<RT_SiteConfig.pm>. Note that you can use either GPG Agent or
set the passphrase in the site config, you need not do both.

=head2 Service Level Agreements (SLAs)

 RT supports many different configurations to automatically manage setting
 Starts and Due on tickets based on SLAs. See the
 L<SLA documentation in RT|https://docs.bestpractical.com/rt/latest/RT_Config.html#SLA> for details.

=cut
